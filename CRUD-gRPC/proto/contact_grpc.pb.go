// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contactpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactServiceClient interface {
	CreateContact(ctx context.Context, in *CreateContactReq, opts ...grpc.CallOption) (*CreateContactRes, error)
	ReadContact(ctx context.Context, in *ReadContactReq, opts ...grpc.CallOption) (*ReadContactRes, error)
	UpdateContact(ctx context.Context, in *UpdateContactReq, opts ...grpc.CallOption) (*UpdateContactRes, error)
	DeleteContact(ctx context.Context, in *DeleteContactReq, opts ...grpc.CallOption) (*DeleteContactRes, error)
	ListContact(ctx context.Context, in *ListContactReq, opts ...grpc.CallOption) (ContactService_ListContactClient, error)
}

type contactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceClient(cc grpc.ClientConnInterface) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) CreateContact(ctx context.Context, in *CreateContactReq, opts ...grpc.CallOption) (*CreateContactRes, error) {
	out := new(CreateContactRes)
	err := c.cc.Invoke(ctx, "/contact.ContactService/CreateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ReadContact(ctx context.Context, in *ReadContactReq, opts ...grpc.CallOption) (*ReadContactRes, error) {
	out := new(ReadContactRes)
	err := c.cc.Invoke(ctx, "/contact.ContactService/ReadContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) UpdateContact(ctx context.Context, in *UpdateContactReq, opts ...grpc.CallOption) (*UpdateContactRes, error) {
	out := new(UpdateContactRes)
	err := c.cc.Invoke(ctx, "/contact.ContactService/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) DeleteContact(ctx context.Context, in *DeleteContactReq, opts ...grpc.CallOption) (*DeleteContactRes, error) {
	out := new(DeleteContactRes)
	err := c.cc.Invoke(ctx, "/contact.ContactService/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ListContact(ctx context.Context, in *ListContactReq, opts ...grpc.CallOption) (ContactService_ListContactClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactService_ServiceDesc.Streams[0], "/contact.ContactService/ListContact", opts...)
	if err != nil {
		return nil, err
	}
	x := &contactServiceListContactClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactService_ListContactClient interface {
	Recv() (*ListContactRes, error)
	grpc.ClientStream
}

type contactServiceListContactClient struct {
	grpc.ClientStream
}

func (x *contactServiceListContactClient) Recv() (*ListContactRes, error) {
	m := new(ListContactRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactServiceServer is the server API for ContactService service.
// All implementations must embed UnimplementedContactServiceServer
// for forward compatibility
type ContactServiceServer interface {
	CreateContact(context.Context, *CreateContactReq) (*CreateContactRes, error)
	ReadContact(context.Context, *ReadContactReq) (*ReadContactRes, error)
	UpdateContact(context.Context, *UpdateContactReq) (*UpdateContactRes, error)
	DeleteContact(context.Context, *DeleteContactReq) (*DeleteContactRes, error)
	ListContact(*ListContactReq, ContactService_ListContactServer) error
	mustEmbedUnimplementedContactServiceServer()
}

// UnimplementedContactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactServiceServer struct {
}

func (UnimplementedContactServiceServer) CreateContact(context.Context, *CreateContactReq) (*CreateContactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactServiceServer) ReadContact(context.Context, *ReadContactReq) (*ReadContactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContact not implemented")
}
func (UnimplementedContactServiceServer) UpdateContact(context.Context, *UpdateContactReq) (*UpdateContactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedContactServiceServer) DeleteContact(context.Context, *DeleteContactReq) (*DeleteContactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactServiceServer) ListContact(*ListContactReq, ContactService_ListContactServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContact not implemented")
}
func (UnimplementedContactServiceServer) mustEmbedUnimplementedContactServiceServer() {}

// UnsafeContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactServiceServer will
// result in compilation errors.
type UnsafeContactServiceServer interface {
	mustEmbedUnimplementedContactServiceServer()
}

func RegisterContactServiceServer(s grpc.ServiceRegistrar, srv ContactServiceServer) {
	s.RegisterService(&ContactService_ServiceDesc, srv)
}

func _ContactService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactService/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).CreateContact(ctx, req.(*CreateContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ReadContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ReadContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactService/ReadContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ReadContact(ctx, req.(*ReadContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactService/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).UpdateContact(ctx, req.(*UpdateContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactService/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).DeleteContact(ctx, req.(*DeleteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ListContact_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListContactReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactServiceServer).ListContact(m, &contactServiceListContactServer{stream})
}

type ContactService_ListContactServer interface {
	Send(*ListContactRes) error
	grpc.ServerStream
}

type contactServiceListContactServer struct {
	grpc.ServerStream
}

func (x *contactServiceListContactServer) Send(m *ListContactRes) error {
	return x.ServerStream.SendMsg(m)
}

// ContactService_ServiceDesc is the grpc.ServiceDesc for ContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _ContactService_CreateContact_Handler,
		},
		{
			MethodName: "ReadContact",
			Handler:    _ContactService_ReadContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _ContactService_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactService_DeleteContact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContact",
			Handler:       _ContactService_ListContact_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/contact.proto",
}
